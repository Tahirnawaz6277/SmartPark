// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartPark.Data.Contexts;

#nullable disable

namespace SmartPark.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    [Migration("20251022070020_SeedRoles")]
    partial class SeedRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartPark.Models.Billing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Billing__3214EC071633A827");

                    b.HasIndex("BookingId");

                    b.ToTable("Billing", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Booking__3214EC071F3976DD");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.BookingHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("StatusSnapshot")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__BookingH__3214EC0765BFFF25");

                    b.HasIndex("BookingId");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingHistory", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Feedback__3214EC070D5AFE9B");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.ParkingLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImageExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TotalSlots")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__ParkingL__3214EC078AEAF522");

                    b.HasIndex("UserId");

                    b.ToTable("ParkingLocation", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Role__3214EC0724F0883C");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleName = "Driver"
                        });
                });

            modelBuilder.Entity("SmartPark.Models.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SlotNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Slots__3214EC0781C0686A");

                    b.HasIndex("LocationId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("SmartPark.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImageExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__User__3214EC07FA75525E");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534CBBEE4F1")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SmartPark.Models.Billing", b =>
                {
                    b.HasOne("SmartPark.Models.Booking", "Booking")
                        .WithMany("Billings")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Billing__Booking__5DCAEF64");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("SmartPark.Models.Booking", b =>
                {
                    b.HasOne("SmartPark.Models.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__SlotId__59063A47");

                    b.HasOne("SmartPark.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Booking__UserId__5812160E");

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPark.Models.BookingHistory", b =>
                {
                    b.HasOne("SmartPark.Models.Booking", "Booking")
                        .WithMany("BookingHistories")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingHi__Booki__6477ECF3");

                    b.HasOne("SmartPark.Models.Slot", "Slot")
                        .WithMany("BookingHistories")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingHi__SlotI__6383C8BA");

                    b.HasOne("SmartPark.Models.User", "User")
                        .WithMany("BookingHistories")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingHi__UserI__656C112C");

                    b.Navigation("Booking");

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPark.Models.Feedback", b =>
                {
                    b.HasOne("SmartPark.Models.ParkingLocation", "Location")
                        .WithMany("Feedbacks")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Feedback__Locati__6C190EBB");

                    b.HasOne("SmartPark.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Feedback__UserId__6B24EA82");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPark.Models.ParkingLocation", b =>
                {
                    b.HasOne("SmartPark.Models.User", "User")
                        .WithMany("ParkingLocations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ParkingLo__UserI__4E88ABD4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPark.Models.Slot", b =>
                {
                    b.HasOne("SmartPark.Models.ParkingLocation", "Location")
                        .WithMany("Slots")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Slots__LocationI__534D60F1");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SmartPark.Models.User", b =>
                {
                    b.HasOne("SmartPark.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleId__48CFD27E");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartPark.Models.Booking", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("BookingHistories");
                });

            modelBuilder.Entity("SmartPark.Models.ParkingLocation", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("SmartPark.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartPark.Models.Slot", b =>
                {
                    b.Navigation("BookingHistories");

                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("SmartPark.Models.User", b =>
                {
                    b.Navigation("BookingHistories");

                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("ParkingLocations");
                });
#pragma warning restore 612, 618
        }
    }
}
